
----------
...

[PLEASE STAND BY]

Is good morning. Testing the mic. If it works, if it's clear. If everything I say you receive.

>> CAPTIONER: Yes.  Welcome twoRustFest. We're happy you're here and we're also happy to introduce tout MC.

[PLEASE STAND BY]

>> Welcome everyone. It's good to be here at the first RustFest. I've been programming at rust now for a few years on and off and it's been a really crazy journey. To be here at a conference to talk about it in sort of an official capacity is very, very exciting and I'm sure it's exciting for all of you out there as well.



I want to talk a little bit about what RustFest is all about, at least, according to me. A lot of people think that a conference about programming and things like that. And a lot people have brought up this meme at RustFest that happened at portland, about Rust being fast, concurrent and great. And I think that's true and I think there's a fourth one and that's community. Can you have community with a really awesome language for me, RustFest is really about that community. Sure, we're going going to be talking about code and look at really interesting technology. At the end of the day, the reason we're all here is to meet one another to talk about something that we really love and to talk about a language that allows us to do new and awesome things.



One of the really cool things about RustFest and Rust in general is that Rust really represents a lot of communities coming together. I didn't program in Rust until a few years ago, only, because it didn't exist until a few years ago, at least in a forum that was sort of usable by the general public. I came from a background doing Ruby, Rubion Rails. Scala, functional program and I know there's a lot of people that also come from that sort of background and different backgrounds. I'm kind of curious who here comes from sort of maybe a systems level programming, C, C++. We have quite a few of those and that makes sense for where RustFest is all about. Who comes from maybe some diNam being languages like Ruby, Java script? Also a lot people, which is great. And a lot those people raised their hands multiple times, which is totally cool. Anybody coming from sort of the dot-net Java enterprise world? That's really great. Anybody who's new to programming the last few years in we also have some beginning programmers, which is really awesome. To pee, that's really what Rust is all about. All these people from diverse backgrounds, diverse technical backgrounds, diverse places, different backgrounds and place coming all together. And we're here to talk about something really, really great, which is the Rust programming language. With that being said, we're going to dive into the nitty-gritty, technical details of the conference itself and we'll start off about the venue itself. The venue you can see around here. The first thing to notice, is it's not the biggest thing in the world. With that being said. Before I get into that, photography. If you have a black lanyer around you, you are okay be being photographed. Red means you are not okay with being photographed. If you think have the wrong L customer, tell one of the organizers. We do have a quiet right over here, back to the right and that quiet room is really if you're feeling stressed because of the small size or the amount of people or for whatever reason. You can go in there and have some quiet time for yourself. We please ask you that you respect the quiet room the quiet room isn't go in the quiet room for a phone call. Once you feel better, let someone else go in there to get away from the crowd.



We have a code of conduct you can find at Berlincodeofconduct.org. Really, the gist of it is be nice to each other. We're all here to have a good time and there's no need to be a jerk. We have an emergency number to call if you have any trouble what so ever. That includes, if you get lost here in Berlin, tomorrow we're going to be walking around in the city. Berlin is a bit of a big place. So if you get lost, feel free to use this number:



You it take a photograph of it, write it down. Don't take it down now, but if you feel you should have later, come talk to one of the organizers and they can get you the number later. Tomorrow, we have a bunch of workshops. Workshops, in the world means different things to different people. People imagine someone up front, giving a lecture. That is not the way the workshops work tomorrow. They are free and open and for people to come together with shared interests, about different topics to come and learn together, meet together, explore ideas together, whatever you want to D. so we have very topics, including the web, low-level programming, maybe operating systems, something around that. Embedded program. We have cryptog graphy. Block nature. Start think going what you're interested in and we'll have an opportunity to bounce around some of those as well.



These workshops are going to be spread throughout Berlin and we'll give you more specific information where those are as well tomorrow. We're going to be meeting at the venue tomorrow. We'll have a talk in the morning. Meet here and then we'll be able to spread out to the workshops and come back in the even for the final talk. Finally air, word about one of our workshops that we have, which is the Rust Bridge workshop, a new workshop geared towards beginning programmers. So maybe you have some experience with programming before, but not really much experience with Rust and would like to learn about it then can you participate in that.

We ask that the Rust Bridge mentors be at the venue at 9:30 a.m., which is earlier than the other workshops and other workshop itself starts at 11:00.



You can find information on the RustFest website. And activities as well.

This is for any kind of activity. To the just the workshops. If you feel you have a good idea of something where you want to get a couple people together. Can you go ahead and post on this website and people can sign up and things like that. We have one event tonight that's not directly affiliated or sponsored by the event. But it's the one aim even party tonight. I believe it's their one-year birthday party. So you can find information about that at this URL here. If you want tonight to go there, there will be drinks and can you go with a bunch of people some words about politics. Tomorrow is an election day here in Berlin. So there will be some election things happening around town and also, the organizers will be out voting early in the morning. So we may start a little late. That being said, there's also a demonstration happening here, that's a right-wing demonstration. So just be aware, that there could be things cause by the that.

That's happening 1-5:00 p.m.

We'll probably be in here the entire time, so that's not a problem. But just be aware.



I forgot to bring up the Origami, but we have some Origami you should have received and you can make nice Origami things here. You can find out how to make your Origami at the URL you see on the Origami paper.



We have some very lovely sponsors that have helped us put on this event and the first sponsor is Florence Company, and he'll be telling us about the rest of the sponsors.

[Applause].



>> So this is maybe my 12th conference, and the more and more I run conferences, the more grateful I am for sponsors. It's absolutely a good thing. We have two organizing sponsors. One is my company, and the other one is honey part, who's C.E.O. Tracy has been helping us with technology and all these kinds of things and design. So I'm really grateful to them, they approached us at the beginning of the year. Actually, by coincidence, they contacted the community team that they wanted to run a conference in Berlin and contacted the RustFest community in the U.S. and they said, there's also, people that want to run a conference and this is how it happened.



We have got a venue sponsored thatted us early O. gave us a call and said, let's talk F. don't have a venue, and no funding, and presumably, no budget, come here, we'll make sure it happens. And I'm really grateful for being so flexible. It's a great team here. And I was really surprised. We have two gold sponsors that are going to introduce themselves right after this. One is One Aim, building door locks. That is a very interesting topic and they're also sponsoring this even party, which is not affiliated with the conference. We have our own even party as well that's going to happen at this venue. If you want to go to the party, it's rather small. You need to get a budget banal to get in, which can you get at their table here want so if you want to go, get a badge. Just take one. Modern cryptic technologies, Robert's going to introduce to you in a second. And [indiscernible] has been happen negligent week before this, from Monday through Wednesday and the larger tech school. And programming languages, at the Rust meetup community is also organized within the open tech school.



We have two sponsors, one is key task and the other is Thought Works we have venue appearance. Thought Works has a venue over here and other one, I want to say a couple words about, too. it's the cohop. Many people that are not from Berlin don't know the co-op. It's the working space that's a few years old and they have a concept that when the co working space closes down, it's available for free for community events. So a lot of met-ups here in Berlin, started out. Because they said F need a room, just come in and get a key and can you have us for the night. They have events almost every even, and of course running that, without any money involve for many years now. Finally, we have technology appearance. Wiring microphones. They're doing all the networking, and audio stuff and the people from [indiscernible] Records, doing the video recording. So let's continue on.

[Applause].

<< 01-ethcore.md >>

[Applause].

>> MODERATOR: So next, we have a quick talk from YAN.

<< 02-1aim.md >>

[Applause].





Ryan: So is everybody ready? Oh. Come on.

[Applause].

It's a programming conference. What's there not to be excited about?

[Applause].

So next, we have our first keynote, our speaker is somebody to get very excited about. He works from his own research, work on the compilers and language team for Rust. And the one thing I'm most excited about for Felix's talk is that it really combines something very unique about Rust. The ability to really have your head in the clouds in thinking of things like category here and he advance type systems but at the same time, having your toes rustle around inside the bits. So I think everybody here is going to enjoy what Felix Klock has to say. So welcome, Felix, to the stage.

[Applause].

<< 03-felix-klock.md >>

[Applause].

>> Ryan: Unfortunately, we don't have time for questions right announcement we're going to take a 10 minute break. And I'm sure Felix will be available at the break for questions. And we'll be back at a little bit after 11:00. Thank you very much



.



[Break Taken]





>> Ryan: Excuse me, if people can start making their way back to their seats. Thank you.



Hello, hello. Welcome back from the break. We're going to get started once again. Is everybody feeling good? Everybody's minds really warmed up? So our next speaker is coming all the way from Vancouver. Made his way over here to talk to us about a topic that's a bit on the other end of the speck rum from our last talk. Maybe you're not so familiar with Rust and this is one of your first times being exposed to language. Brian Pearce will talk about getting to know Rusts and things to love.

[Applause].


<< 04-brian-pearce.md >>

[Applause].



>> Ryan:  All right.  Thank you, Brian, that's great. We don't have time for questions. We'll be moving on to our next talk. Our next speaker comes from a far away land, Germany. And he is very interested in security topics. Today, he'll be talking about a library he wrote in Rust for just simply binaries. Everybody welcome Kai Michaelis to the stage.



[Applause].



<< 05-kai-michaelis.md >>


[Applause].



>> Ryan: So we do not have time for questions but we will have a lunch break after the next talk. So our fixture speaker coming up told me a really funny story about his Zuck into open source. He Sundays a couple of thousand lines of code to the maintainer when he was about 14 years old and never heard a reply back from that.

So E-mail, it was not formatted. So hopefully, things are going much better since then, but Tim Ryan will be talking to us about the Internet of things, and the systems with Rusts. So welcome to the stage.



[Applause].



<< 06-tim-cameron-ryan.md >>



[Applause].



Ryan: Thank you very much. Unfortunately two have time for questions. We do have time for lunch. Take your seats real quick. Lunch works in ways that you may not be used T. at a conference, there's no getting up that's necessary. We bring out lurch to you, since we want to make sure that everybody has space here. If you want to eat your plump inside, that's fine. If it's not raining tooad badly, you can get it outside, as well.

With that accident said, we will now bring out the lunches to you.



[Applause].



Thank you.



[lunch] the sit down part is just until I finished announcements. If you want to stand up, can you stand up. Can you remain seated as well.

But we will bring out lunch to you.



[lunch]

Ryan: Attention, everywhere, we're going to be getting started soon. So make your way back. We'll be starting soon. All right, welcome back. Did everywhere have a great lurch. Yay! . You may want to take this opportunity. To like, shake yourself up a little bit. You know, get over the big bowl of food. We have a great talk up next. But first a couple announcements. I want to tell everybody, this is a community conference, and a big shot out to our organizers who have done a really awesome job organizing this thing. Can we have a round of applause for the organizers?



[Applause].



There was a special gift given out M socks. And we have something very special prepared for you as well. Unfortunately another not socks. I apologize. But wait. You can't take that piece of Origami paper we gave you earlier. If you follow this URL, I will teach you how to fold your paper into sox. So that's good. So yes, we do have socks at . It's great.

I believe there was something called self-y stick fencing happening, so if anybody wants to participate in that or post your own ideas for events and get people excited about other things, then that is there for you and there's the URL again. All right. And I think that is the end of the post lunch announcements.



Next, we have a talk, near and dear to my heart, a project I've contributed. And Ashley will give a talk, so everybody give a warm welcome to Ashley Williams.



[Applause].



<< 07-ashley-williams.md >>



[Applause].



>> RYANN: Thank you very much, Ashley. So we have another talk coming up. This is by Stephan Hugel, who will tackets about coordinate system transforms and FFIin Rust. This is his first talk about programming so I think it's going to be a good one. What do you think all right. We're going to get started.



<< 08-stephan-hugel.md >>

[Applause].





RYAN: Martin will be giving next talk. Apparently, he was looking at the gobble maps URL and sought coordinate he is got from that, and it was tow a so specific of numbers, something like, 10, 15 decimal places. 13 decimal places. It would of course so accurate to the nanometer.

>> MARTIN HELLSPONG: 10 nanometers close enough.

>> RYAN:  I don't think we need talevel of accuracy, but it's go g to know we have it. Just in case. And without further ado, here's Martin.



[Applause].



<< 09-martin-hellspong.md >>



[Applause].



RYAN: Thank you, Martin. Next, we have a tradition of cake and coffee, that will last for roughly, between minutes, I believe Soros. Maybe a little bit longer. And then we will come back with more talks. So enjoy your break.



[Break Taken]



RYAN: Attention, everyone, we will be starting shortly, finish up your coffee and finish up your cakes and your conversations. We will be starting in just one machine, so please, make your way back to your seats. Thank you very much.

All right, welcome back. Has everyone had enough cake and coffee in their system now? Next up, someone that hails from Dayton, Ohio, and now, here in Berlin. William Light will be talking and let's give him a very warm welcome.



[Applause].



<< 10-william-light.md >>

[Applause].



RYAN: Our next talk is about a topic that sometimes isn't talked about enough. We have had some deep diving in code. And that's agreement but there's something else we do a lot in our day-to-day life as programmers, and that's communicate. So our next talk by



Sharon Steed here. So give her a round of applause.



[Applause].



<< 11-sharon-steed.md >>


[Applause].



>> RYAN: So our next speaker was telling me last night, about his experience working on chip design. But he's not giving a talk related to that at all. It's going to be about wood frameworks which is also really cool. So I'm excited about that.

But I think you should talk to him about the other stuff. That's really interesting, too and so, gettings things set up here. So we're anything to have Matthieu Wipliez talk talk. So round of applause, please.



[Applause].



<< 12-matthieu-wipliez.md >>



[Applause].

Push.

>> RYAN:  We're going to take a 15 minute break and our final keynote and the wrap up for the day. So we'll be back in 15 minutes.



[Break Taken]





>> RYAN:  Can we get seated again.

So I'm going to introduce the last two sponsor Zucks. So I'll make it quick. I already gave my talk this morning.

>> Thank you to all the sponsors, Microsoft, as the menu pops or here, I think they made a really great day and made a really nice conference out of this venue. Our corporated partners. You might have seen Ben runs around. As tomorrow, we will have the venue and I'm leadership looking forward to that.

That makes me introduce our first even sponsor introduction, Microsoft employee, Ryan Levic.

[Applause].



>> RYAN: Hello. I'm a Microsoft employee. Crazy. Wasn't that guy the M.C.? Yeah, I wanted to talk about Microsoft in general, a little bit about Microsoft here in Berlin, for the people that are in the German area and throughout Europe that maybe would want to come work here and talk about open source at Microsoft, which is still something that a lot people, including myself are getting used to and touch on those topics, and if you want to talk to me later about any specifics about Microsoft, then feel free T. I would be happy to talk to you about it. My personal story is that I work for a small Berlin company and made an app called wonders and it was purchased by Microsoft so I'm new as well.

It's been about a year now. I'm starting to learn my ropes but I definitely have seen many sides of Microsoft. One thing I wanted to show, I don't know if everybody saw this. This is from GitHub Universe and Microsoft organization is the number 1:00 over open source on GitHub, which is just fascinating. If you would have told anybody in this room 10 years ago, they would of course very, very surprised. But the cool thing, it's becoming less and Les surprising every time, I see something like that. Microsoft and open source are hand in hand together and there are many times I've gone to the Seattle team and they were full time on open source. Everything they do is out in the open and interesting as well, they don't work on windows. So there's a lot Linux hackers and things like that will so it's sort of, I don't know, not what you would have thought of 10 years ago for Microsoft.



Here in Berlin, we have a couple of teams that are working on various products. One of them wonders and we have a couple of people from the wonders teams here. Yeah. Cool. We have got a couple people here. And I'm working on another project as well. I should just mention briefly, we are hiring for both teams and we're looking to expand the office here in beer lip as well to be much larger than it is now. So if you're ever interested if opportunities there. I'd also be happy to talk about those. I also want to talk about the ability of Rust at Microsoft as well. It's something I'm very passionate B and it's a really cool thing to work for a big company that has a lot of sway in the 43. I have this fantasy of one day writing that block post like we just employed this massive product out. And it's written entirely in Rust and that would be awesome. One problems I'm working on right now is sharing code with Rust. We have a lot of shared sequence C++ code, for instance, and it would be really cool if we could move some of that to Rust instead. I believe, Excel finally got rid of all of its if-line assembly, and is now using C++ spiral, which is good. If you're interested in talking about that, how someone can share code, between different platforms, IOS, android, Mac and windows as well. To share a logic between apps, I would definitely be interested in talk to you about that tomorrow in a workshop. We can sit down and hack some stuff together. So that's all have I to say. If you have any questions, and are interested in learning anything about sort of the way that open source works at Microsoft now days, come catch me sometime. So thank you.

[Applause].

>> Hi,en, I'm Steve, I'm here to represent Mozilla. You know us as the fine finest purhave aers of -- ervayors of human interface us. It's someone who has been in technology. Using fire fox. I remember fire fox. And if you would told me then, you'd work for the same organize. I'm really happy to work on Mozilla. I'm going to use this next five minutes to talk about other stuff. As a member of the Rust community team, there's been a lot of really interesting new projects that of course happening. I originally started the community team, but Steve doesn't scale. So I've been focusing on docs and Eric has picked up the slack there and has been doing wonderful things. Tomorrow we're going to have the first ever Rust ridge workshop. I come from Ruby rails and railsridge, moving intoxicator languages so we're hoping to run workshops all over the world and teach people how to program and teach them Rust. And collecting community resources, helping others run great community-run conferences like this one and put on, things so I think one of Rust's strongest selling points is a community. They're all wonderful people. And thank you much for coming if you see me, feel free to come ask me.

[Applause].

We have our last speaker, do you want to come up? Our last keynote for the day. Is a speaker that comes all the way from Brazil. She runs the SAO Paulo Rust meetup and she's going to be talking about science and Rust. Which is very exciting. So breeze, a warm applause for Hanneli Tavante.



[Applause].





>> HANNELI TAVANTE: Fun time. Is the connector safe? Should we borrow another one? Don't panic. (Pause).

Okay .

Hi, I'm Hanneli. I'm from Brazil, I'm a software developer and as our friend told us, I started the Rust in Sao Paulo care. Today, we have about 300 members, which is something. We have been running the meetups for around a career and we can proud a meetup almost every month, and some are happy to see we are growing and usually, we have some volunteers front some interesting topics, such as implementing genetic alrhythms with Rust, implementing the basic concept of the language with pokeman. We had this talk. So I'm happy to see this community growing. During my free time, I like to do these things here. I like pokeman. So if you're playing pokeman go, we can walk around the city to catch some pokeman.



So this presentation is about rewriting code in a talk called octave F. you're not familiar with octave, I'm going to talk about this in the further slides. But as a bonus, even if you are not working directly with Rust, I expect that by the end of the talk, you have an idea of transforming some math concepts into your code. In ray very expressive way I'm going on show you step by step, how we started building some codes in Rust for active. So this is going to be, kind of, you know, addressed so there is some code that actually doesn't run. In the last slide I'll leave you with reference so can you get the code from GitHub and run it. I think nobody is requesting to be scared about the math that there is this presentation and to help us to keep firm until the dinner time. Let's start taking about some training tools and science. Training tool in science are becoming very popular probably has consequence, some of these tools, based on Corcera. Everybody here didn't know what scorecera? Doesn't. It's very popular. EDX is another popular, too. people who are develop developers, people who do not have a background, it's pretty exciting. This is like bringing topics like data analysis, big data, to people who are not connected with research. Which is pretty interesting. I was talking to some students, that graduated maybe last year. And they were telling me, they use some of the tools to help them with mathematics. So one is octane and it can help you, if you are for example, electrical engineer trying to solve some crazy and differential equations for very difficult and you need hands on software to provide support. I pretty much like Coctave. But I had difficult times, during my under grad year when is I was doing research. I usually had a problem to resolve, low frequency inverseer, trying to figure out how to implement that I would spend a lot time on things that have nothing to do with the Ochave. For example, I was getting a tangle or I forget to reallocate memory and everything blowup want that was kind of frustrating to me. I'm not saying like, this happens to everybody. But you know, very hard and difficult time. And pretty much, all the other tools were open source would provide meet same problem. I had trouble to extend the functionalities of the tool. And I was surprised because when I ask the students if they like it, they say yes. But we have trouble to express mathematics, with C and C++. That's the case you end upping a lot of time or something else, rather than spending time with your problem. Then I started to think about the possibilities that we could adapt to resolve it. I was studying Rust at that time. Version 1.0 was just released. I spoke about Rust and they accepted to try the language and see if it could help them with the problems that they were facing. So Octave if you're not familiar with the two is pretty much useful for machine learning for data analysis. For maybe, something, some calculations that it needs to do with computer vision and things like this. It's useful for example, operations with matrices, body charts, statistics, and several other areas that have some heavy population sets, you know, you don't want to resolve everything by hand. A good point about Ochave is it is open source. And open source is pretty good. It usually extends the existing libraries and things like this.



This is what usually happens when you're doing research. There's a point when you need to add your code to an existing, too. For example, there are lots of external publics that people bell for Octave and they are available on GitHub or any other source repo. Then can you easily, you know, add your contribution to the tool. Which is amazing. But sometimes it's not easy to handle. A very famous data structure is this one. It's very likely that's one date. At any point of your life, you receive this spreadsheet. And a spreadsheet is a table. So we have to handle tables or better, matrices, in several scenarios, several distinct scenarios, right? Why matrices are so important. Everybody Sundays me spreadsheets. No. Not only because of that. Matrices, they can represent us in several different areas, and sometimes you're not aware that you can represent something with a matrice. But you actually can. So, I guess one of the first context taw had with matrices, was in high school. But not sometimes, not even in mathematics, math classes, was something else. To remember this law here? Ohm's law. You have this, you have the voltage and then have you this relation, other resistance in the voltage. And then, you can make this even more sophisticated. I'm happy because it talks about [indiscernible] today. So, I guess it's scared of this. Even if you failed in physics class, you might remember something like a circuit with voltages for the resistance. By the way, those are the [indiscernible] flaws. You have a bunch of equations and find a value for every variable that you V and involve it in the system. So there's some work and figure out what the value is for, the resistance 1, 2 and so on. But for linear systems, there is an alternative representation, rather than this one with the curly brackets. You can represent with matrix. And there are advantages of representing linear systems as matrices. We can apply several different rules. For example, there is what you call the turn -- several different reduce of finding properties of a linear system. So understanding a little bit about matrices helps us a lot to resolve linear systems. And linear systems, they are a structure which is, which you can find in several different areas. For example, electrical engineering. Environmental initialing, healthy environments, behaves in things like this this is part of the code you have to represent an array or a matrix in compiler. This is the code base for array and a class called matrix. This is a very expensive code. It has around 500 lines, something like that. And it's pretty much plate coderation.



So those students that were talking last year, I asked them what, is the most frequent structure that you use in octave.

How would you build a matrix in Rust? Vector. But a vector, how would you build your own? Come on. You know that truck. Let's build this truck called matrix. Makes sense. Makes a lot of sense. So tell me, what's going to be. Think about a matrix. Think about this matrix here that you were on the right side of the screen. You have rules. You have goals. And there is something inside the matrix, which are the matrix elements. That makes sense. And this is simple. This is the very first step that you have, in trying to build a representation a matrix. Makes a lot of sense.



We started discussing something else. So for example, you can remember your math classes, when you multiply matrixes, can you multiply any matrix with any other matrix if no, there's a rule. So on the right side, you have a matrix with two rows and on the left side, a matrix, with three rows and 4 columns. Can we multiply this matrix tricks? Yes. The number of column equals the number of row in the second matrix. So yes, we can multiply this. What's going to be the dimension of the output matrix we have some rules, based on the matrix. Interesting. We have to keep checking. Did I mention, every time but this is what you do in C++ because of the template. You have to keep checking all the time. This is not very convenient. How can we prove this code? We want to add some behavior. Structure. So this is a bad representation. Don't do that.



Instead, create a trade. Call dimension. That makes sense. You can ask all the behavior, based on the dimension of a matrix inside this code and this is going to be much more explicit when you give Rust to matrix you don't have chief Pence trying to, you know, perform an operation with matrix, with dimensions that did not match. This is pretty interesting. I was reading something on the Internet. So there is a link, at the bottom of the page. And he suggested that we should use phantom data, when we were presenting a matrix and that makes sense. Can you picture in your head, a matrix without any element? Doesn't make much sense. Is this kind of thing doesn't exist. And this author was saying something like, you should have elements representation. Which you can do by using phantom data or you can create your own type of matrix elements. Kind of doesn't matter. But this presentation of a matrix is kind of much better. And much more well structured than our nation presentation where we had rows, columns and something pretty vague for data this is how the end yearis I. implemented. Any kind of array has been mentioned, as elements.



Next challenge. Can you think of codes to represent clear matrices? Does it make sense to have a code for matrices, in terps of the common and most used mathematical properties that have for matrices in yes, makes sense to utilize squared matrix. Base on the matrix itself. You can fix the dimensions. So the dimensions are always equal want and then you can derive a bunch of code from this initial code. So its pretty convenient for us. And with that. I hope you had a very quick overview of why linear is important and why matrix are important. And I really hope you can follow the main idea of how we get a mathematical concept and we apply this to Rust. That was our very first attempt in the final codes, that we're using, was pretty much like this one. And everybody's kind of happy with that. Another important structure that students research this a lot. Complex numbers. If you come from an initialing backgrounds, you're very likely to have seen a lot complex numbers. Do you know why there is a reason for people to keep using complex numbers. Do you know why? I mean, a good explanation, because they like T. there's there's an imaginary part that's a school. This is not a good good, you know, this is not a good point. For example, computer, which is a very nice subject. Everything is based on complex numbers. It's easier to differentiate. That is one point. But you can differentiate different numbers as well. Of minus 1. So there is a more generic reason to use that. Let's talk about this. This is kind of the off-topic moment of this lecture. But I hope that after it session, you share with everybody why you use those numbers. There's a single mathematical reason for this eqivalence. Why doesn't it exist? This is true. This is true that makes everything much more simple. Let's talk about this.



Let's start from the beginning. Integers. I'm happy because of the very fist keynote of this morning, we were talking about integers, and real numbers. But we didn't reach the complex numbers, which are so important. So when you add an integer to another, what is the output? Anent jer. Glad glad it's an integer. So when you're talking about the operation, the output equals input. To the type. But that's not true. When you're talking about division. If you divide an integer by an integer, what happens? You may not have an integer as a result. May not. There is a chance it is, but there's a chance it's not. I added the letters that correspond to each set by hand. It's pretty August ugly. I'm sorry about that there is a set. Which if you're not familiar of the other sets. You can easily copy this concept from the keynote headed this morning. What is the most inclusive set that can be using. They're real numbers want okay. Cool the numbers. 0 is annex collusion. Don't consider that.

There is something even more generic than divided by 0. Is there any other operation you can think of, somebody already told the answer. Yes. There is an operation you provide input and you might not end up with this one as the output when you're looking for a square root of a number. If you're look for example a square root of -4. The result is not going to be a minor number. So this is sad. So the thing here is like, complex numbers we say they are closed for the most common operations. So if somebody says that this operation is closed, you can be sure that staying put is going to be as the same type of the output. And this is convenient for functional programming if you're talking about types you weren't sure of the output, the type of the output, and you can, you know, dereef lots of things about that. Can we express this property with code? Yes. It's not difficult. For example, you can have this structure here, called complex number, that has the real and imaginary parts and all the mathematical operations are going to result in a complex. Something like this. This is pretty much straightforward and convenience. Maybe sure the existing types are closed operations in a certain scope. Which is very convenient for several operations and initialing. Sometimes engineering, want to be sure that the output is going to be equal to input. This is much true. Think about T. Rust is very powerful. You cannot have the behavior. Even for existing types. There's probably somebody doing that. Because the biggest tools you have for initialing, they still using using imperative programming or if some language, that sometimes you cannot have this level. It just create ace trait, and that's to an existing type.



The complex numbers are already part. So you do not have excuses to keep usings open stats for your most common operations. I think I still have time. I don't know who's counting the time. But some lessons learned. There are really great skills to help mathematics, in terms of engineering and general science. But I don't know about you, but I've been struggling with the tools for a long time. Besides math lab and compiler, for example, we have VHDL. It's the language that describes harbor. If you think about VH -- couldn't we be using Rust to strike hardware. Based on the sessions to date, yes. But could Rust become a substitute for VHDL? Maybe, yes. I had a very hard time with trouble that I couldn't, I simply could not represent that and maybe with Rust, we could improve over the system in general. For me, it was pretty sad to change my focus. I was trying to solve a problem. How can I optimize the trails of the circuits and I should resolve this and this and this. Trying to solve dangly pointers or something I did in the middle of the code. Then it was not very productive to me. It was kind of time consuming from my research is something that should be training my time of that research. I had a very difficult time and sometimes I wanted to add behavior, an existing type, so I had to create another class with another set of descriptions, and things like this and with Rust, I don't have this problem anymore. When I learned highway to program, the examples were like with animal. Class animal. And nobody taught me how -- nobody tells me, hey, here's, I don't know a differential equation. Now you get this equation, and transform this. People voter to say, now you use numerical methods. Of course they can represent that. I was just using the wrong language, but there is a way to represent the mathematical structures in a more natural and straightforward way. One last, but not least point I was so happy, the compiler was telling me something, that something was wrong before I'd run T. something very frustrating to me is like, compiler can be slow for some operations and I was writing an operation in compiler and boom. . I wanted to cry. I lost 10 minutes to get a runtime error. I was really sad with that and some of the problems can be avoid for us. With the certain types, the Rust compiler can tell you, hey, don't do that because it's wrong. I don't have the responsibility anymore. I just 38 throw the responsibility to the compilers in certain cases. Connecticut collusion I took from there talk to the students is like, why don't you have many people join that. So we have concepts and mind sets, based on the thought that can be applyd to other areas. For example, a mathematical concept, but we can apply that to, I don't know, maybe payment. Think about it. So maybe you can maybe if you can describe mathematical property, more easily and more trait forward in a programming language, maybe we can start using laws of mathematical concepts, on a daily base. Sometimes I see lots of young people asking, why do you have to study Calculus. Sometimes it's not obvious. How can you be applying these concepts in real-life problems and maybe problems of what developments or I don't know, payments or products and things like this. But if we had a more convenient way to describe mathematics, into programming, maybe we can spread this knowledge across, you know, other areas of the industry. And maybe you can make them more popular. Well, that happens. So I share the good parts and I'm going to share the things that went wrong or almost wrong. So request I started learning about Rust I said oh. there's this thing called unsafe and I'll probably never use that. If you need to integrate Rust with another language. Sometimes you need to use unsafe and I found myself, like every time I had a problem, I'd type this mag call word at the beginning. Sometimes yes F you're doing a full baggage of language, C or python, there is, you can have your unsafe methods or your unsafe function but you should not expose that so you have something else safe. Let the method handle the possible problems that it might end up W. I'm telling this, because I was aware of this but you know, my body refused to do it. It was much more convenient to type them safe, until somebody uses the library and says, Oh, everything is broken. Why. It works on my machine. So make things safer, it's good advice.



There was another example. Safe and unmute F. it's not working, just add mute and everything will be fine. You have fun time, which gates signal, which represents on time, and you opt with that as a signal of frequency. And the same for the case, you have a signal frequency, and back to signal time. So I was use something libraries, because mine was not working so I decided to [indiscernible] mutable aces. I was happy with that. In terp in terms of concept, you're settling something mutable. Once you have the sampling of a signal, it's never going to change. So it doesn't make sense in terms of code. So I was writing a convenient code in terms of programming but it's a code that doesn't make sense at all. In terps of presentation. So when you're going to write. When you're going to write, think about this.A oh. wait. Does it make sense. It doesn't make sense to represent a mutable signal with mute, for obvious reasons. Actually handle your construct into the perfect way. So I'd like to use some references here. The tool for linear algebra, and I was reading the source code. You can actually find some structures that are pretty much the same as the once we saw at the beginning of this presentation. You're going to see that inside of phantom data, they have, a bump of interesting approaches to handle any kind of array of end dimensions. There are also some papers about Rust types and how can like how these types can help you or science tools. It's the FTP link you see there. And of course, some well known references like the nome. Like the dots. And there is one very interesting and probably also well known one. I don't know if you edit here. No. Didn't. I can edit later. It's a tool about FFT in Rust. So some special thanks to Florian. I'd like to add, no, no more [indiscernible]. Bruno is also help being the Brazilian community, and thoughtworks has been hosting most of our meetups. For my mentor, Daniel. And for these people who provide me gifts and of course, for the Brazilian Rust community. Thank you and I don't know if I have time for questions. We don't have time for questions. Ty.



[Applause].

Is.

RYAN: We do have time to wrap up the day and that's what we'll be doing next. How's everybody feel something you know it's a good conference at the end of the day, you're just so incredibly tired because you've been spending the entire day thinking, but at the same time, incredibly inspired so do you want keep going. And your body's like, urgh. Doesn't know which way to go.



So good evening. We have an advertisement. Oh, yes.

>> I'm Andrew.  And I've been at a great advent our. I have to take a break because I'm going to Pittsburgh lastmonth for the last Rust conference of the career. So I invite you all to come, and can you bring your friends because you probably have American friends that are very dependable. It's going to be very great. Can you see our friend, an organizer of this conference, he's speaking there. Ashley and Steve will be there. You're more than welcome to Much we have a coupon go if you go to Rust build Rust.com. And code is RustFest. You'll get 20% off. Definitely share it on twitter and everything. And we really want you to come and have fun and learn more. It's going to be kind of like this conference. There's a day of workshops and a day of talks and it's community run and run by people like carol, on the community team. It'll be awesome. So please come.



[Applause].



>> RYANN:  Here's the information if you want to take that down. If you need T. RustFest day 1 is almost over want you have to listen to me one last time. Some news about tomorrow what's going to be happening the first thing to do is to look at activities,.eu. We have information about the workshops, information about Selfie stick fencing, and more. And feel free to add your activity ideas as well we have submit workshops happening here. The embedded one is happening here. Sorry. Embedded one is happening here. If you have any ideas that are not part of an official workshop, feel free to stay here and can you work together. Try and find people with similar interests. There's also places to just chat and hang out. And we have work shops, those are going to be low stack. Then we're going to have web and crypt Crypto. They're all going to happen at the same time. You can all bounce around. We have the Rustbridge work shop happening and that happens at 9:30. So there's information about where these places actually error. You will probably already be here, but as we have talked in the morning, and we can go over to these places together in big groups. Make sure you have a metro ticket with you. The important reason for that is we don't all want to go down to the subway station and try and buy ticks all at once and have 80 people buying ticket it's once. Buy yourself a day ticket or a multi day ticket if you're going to stay longer in Berlin. And come back in the even. We have a talk and a prize and I won't tell you what the surprise S. it's a surprise. So what's left over for today? What do we have to look forward to? Dinner. We have dinner here. It's going to work very similarly to lurch, so if you want to not stay in your seats, sorry about that earlier. But we will have people walking around serving dinner. One thing to mention about dinner that's different from return. If you get a meal, try and let the waiters pass by you a second time. So other people can get their food first. Once people have eaten, then go ahead and have seconds. There's plenty of food. We want to make sure people get food. We have parties that are happening and eatery party. One party is pretty easy to reach. If you don't already have a wrist band, and you want to go. Get those, I still believe those are available. Make sure you head on over there want it's just taking the subway down to the stations and I'm sure as there's going to be a group going that will be easy to find. You can always find more information, exactly about where it is. And more stuff about it on the on the activities RustFest.eu. Then we also have some a party happening here, at the Microsoft eatery, just in front of here. It's an open space with X-Boxes and surfaces, and you can hang out and stuff like that. They serve drinks, beer, coffee, things of that nature. We have food and drink that will be served here as well.

And that stuff is for free.

Push.

So you can do both. That's totally possible. The one aim party is probably going to last longer and will start later than the other party.





And is that it? I think that's it. So once again, thank you very much, everything, for the first day, it was a real success. Let's give a big round of applause to our speakers.

[Applause].

And a big rounds of applause to our organizers for putting on as well.

Thank you, organizers if you have any questions, feel free to ask the organizers. Anything you want. You can find information on the website as well.

Without further ado want let's commence the even activities.



[Applause].

[End of event











[Please Stand By].



hello, hello, good morning, we're going to get started soon so please head to your seats. Thank you.

>> So many people. Cool.

>> Good morning again. How is everybody feeling.

>> Good.

>> Yeah it's day two. You've made it through day one, now you're onto day two. That's great. So we have one talk in the morning and then we'll have, after that, information about afternoon sessions and such. But our first speaker today is world famous and renowned for inventing the great sport that you all know and love of sell fee stick fencing. So I know keep your photograph reto a minimum. But Sonja will be talking about hobby oriented programming which is great because today we're going to be participating in programming as a hobby I guess which is kind of cool so everybody give a warm welcome to Sonj

.

...(APPLAUSE)...

THE COURT: That's Ryan. Yeah, so my name is Sonja and I only have one shirt.

Laughter).

>> Furthermore I gave this talk before which you know makes this kind of similar from a key note from apple I think only that I'm presenting an improved version of my previous talk and it's an improved version because the wonderful people behind the conference where I gave this talk before is coding they sent me feedback after wards and generally I respond well to feedback.

So one could say it was mixed so there's a ten in there, there was a one in there, someone said it was a major surprise, I think that's a positive thing. Generic and then chaotic, that's fair, you know? Life itself is kind of chaotic. Right now I'm unemployed. Soon I won't have a place to stay, again. And over 95 percent matches on okay cupid I've been friends with before I even set up my profile. So no wonder my talks resemble chaos in a way but it will be fine, right? Because I'm still DOOG well in regards to MOSLOF hierarchy of needs it's a theory of human motivation and it describes the stages that we generally move through when we develop our personality and mind. So the requirements of every stage need to be met in order to move onto the next stage. And by default you know I don't have to worry about finding food, I have a safe place to sleep, love needs let's assume I figure that out too. So there's only one thing left to do that's the constantly recurring critical reflection of my own life and happiness. And on that note I would like to share a moment with you that's still quite vivid in my memory and I'll play some background music for this, hopefully.

And it was in November, 2014, Saturday evening, and 10:00 p.m. or something and I'm sitting on my couch, sipping some sort of liquor, and listening to a recording of the singing comet, I don't have sound, I think, but.

Music playing) while also doing some JavaScript exercising, and I consciously paused for a minute, because it's like this is rather strange, why is there sound in space? But also, this is the comet. So but also why am I at home on a Saturday night writing infinite loops crashing my browser, this is Berlin, shouldn't I be at the kit cat club throwing GLIT ter at people I just met on rinder? Possibly. But today's crisis is to understand the motivation and reason for late night hobby oriented program activities.

So when it comes to code I consider myself an amateur and I would like to know does anyone consider yourself an amateur? One? Two? Couple? Okay, that's cool.

And oh, yeah, my background is in GRAVENGS design so I had to put in (GRAFGS design. So it's considered a person who loves writing code, right? So that's the basic definition of it, and it's not attached to -- you know it's attached to particular pursuit study and science and in a non-professional and unpaid manner. So the definition shines acquired surprising -- surprisingly nice light on the term because amateur is usually con notated with negative associations it describes someone with low capabilities you know no particular depth of skill. So for that reason it makes sense to place the term expert on the opposite end of the universe and expert is a person with extensive knowledge or ability in a particular area of study.

They are commonly recognized as a reliable source of technique or skill, and their ability is based on a long-term intense experience through like research, practice, occupies. And both terms suggest particular assumptions about a person's level of skill, which only leaves the question if experts enjoy what they do, too. So with joy emotions are chaotic let's put them aside for the moment maybe in the quiet room and while we take a look at the general process of skill exposition.

And sucking at something is the first step of becoming good at somethingment and I run into things that I'm bad at, Felix key note for example, you know, I admit I didn't understand a thing but one day I will. And these talks are like poetry to me, they're beautiful. So recently I found odd and particularly bad at aqua PILUXING, it's a mix of Pilates and boxing and the story here is one winter I was just -- yeah, I didn't want to pay money to enter the gym so instead of searched for every training session I could find in the city. And I actually wish there was an app for that so if anyone wants to build that? It worked out quite well but in the end I didn't stick with any of these sports and I believe it's rather unlikely to pick up a hobby out of the blue.

So there needs to be a trigger something that switches on your curiosity your competitive spirit or maybe some good old peer pressure. And in my case there was my friend Daniel telling me to go to a rails core workshop and a galaxy of similar initiatives directed at various groups of humans all of them are fantastic and in fact this is today's the first rust PISH which I'm excited about usually a perfect environment becoming mature because you're joining a crowd of fellow learners and coaches pushes you through that frustration where you reach a point where further learning is possible as a solo activity. I'm feeling lucky because my friend Daniel not only recommended to go with the workshop but he told me how to curl and I'm forever grateful for this for his time and help I want to have that on record.

He was there when I typed my first, second command into the terminal he was there when he tricked me into renaming my local host, explained chrome to me and supervised my first attempts of writing JavaScript without pasting stuff.

I had to come up with a BROEKT for our sessions and what do you know we built my first online business it's a who are scope based on aircraft not star constellations disrupting the future of fortune telling



(Laughter).

>> You saw that coming right? It finds of closest airport to your location and that's all our team needs to generate a personal air sign. So right now it's free. So any I would right on I figured code it enables me to bring my ideas to life. When do I quit my job and pursue this new found parks at one point is parks am I good at it more importantly how do I know? The answer like all answers is in the book not that the book but the book which probably needs some explaining but I'll do that by looking at the game checkers. Checkers is a two player board game each player starts with 12 pieces on his or her side and pieces can only be moved diagonally forward. So a player tries to take the opponents pieces out of the game by jumping over them and first player to remove all the opponent's pieces wins. So I love this image by the way because did you see the floor has a checkers pattern, too? Any way, so in 1863 so one thing, so the game is an extreme example of a regular environment, but just basic condition for sustainable skill acquisition. So now professional checkers players they improve their game by studying the moves that other players have made in the past. They write them down and etch them into their memory. So in 1863 checkers reached its peak. It's the champion sheep between James wilily and Robert Martin's two notorious players facing off in a series of 40 games all 40 end in a draw. All 40 start with the same three to four moves, 21 of them are the exact duplicate of each other from start to finish.

So now the situation is only possible because BOETD players were experts with equal skills in the craft they knew the game inside out and probably each other, too. So both were playing by the book. So doing something by the book basically means not only STRIBTSly follow the rules but also apply perfect technique and that's pretty fine logical way to complete a task. So what if you know some of us writing code by the book. There must be a reliable indication of an advanced level of skill. Only that writing code is not like checkers, it's more like, you know, chess, maybe, because there's no finer boundary to the practice, you know? It's an ever expanding universe. Chess is also an example of a regular environment but the number of possible chess games is approximately 10 to the bottom of 120 and that's far more than the number of atoms in the universe. So now there is more modern chess players also have an extensive constantly growing library of recorded moves at their disposal which they use to study, as well. So even in chess there are whole sequences in a game that are played from memory and that not from thought but in every game of chess there's a moment that puts the book in its place. You have a constellation that has never occurred in the universe before. Both players are on their own it's a zero moment. The novelty, it's a situation that is out of book.

So when you get to that moment you feel you're life. And this might be the right moment to chat about emotions, no? Remember joy, happiness and fun, over there? So maybe that's start with an exercise, so one way how humans em paw CHIEZ with other humans is by copying their facial expressions so in theory when I smile I should see some of you smiling back at me, you know? Otherwise it would be frightening. Maybe it works better if you smile at each other? That made it awkward.

So now while smiling you can also trick yourself into feeling better because the muscles in your face basically tell your brain it's happy time. That's a crude version of the process but that's how it works. It doesn't solve any problems and it barely is the key to happiness, but what is that, any way?

And I'm glad to present to you today the ultimate definition of happiness. Which I found in a video by Alexander GA mm EY it's absolutely gorgeous I'll show you a minute of it, just to set the scene it's day 86 of Alexander's full return from saw Paula and he's about to pick up the last cash what he left behind him he has no clue what he left behind and doesn't expect very much.

(Video playing.) OF.

(Laughter).

>> It goes on for a little bit longer, so I find some other interesting THINGSZ. But I want to clarify that that's not the secret to happy life and all but maybe that needs some further investigation and speaking of investigations, you know sometimes maybe when I get board or I have a talk to prepare I go in and it's fascinating to see the hobbies that software developers get into when they're not working writing code at work. The craft of crochet, baking bred, Japanese archery, making soap, cats, of course. But the greatest hobby of all times the activity that most software developers get into when not writing code at work is writing code at home



(Laughter).

>> On the weekends.  Ryan, for example, from Ryan I learned that he wrote a chip 8 emulator in rust and from him I learned it was a machine and programming language which was using in the late 70 SZ on some computers as a basic gaming platform and now there's a chip 8 Rust emulator from the game pong which is awesome. Everybody says they take out extra work for themselves and I learned from Jane mostly from her work reality is BOEK broken that there's almost nothing that makes us happier than good hard work that we choose for ourselves. L that's a precise definition of how a game works. So when you look at any game it's usually a combination of four core ingredient, first there's the goal, it set the mission and purpose of the activity you're about to engage in, secondly there's rules, they tell you what's allowed and isn't. Some people see that as an opportunity to break them.

A feedback system is essential to tell players how close they are to achieving these goals and that they are within their capabilities and lastly it's voluntary participation. Which basically means making sure that everyone involved in the game agrees to the goal, the rules, and the feedback system. So Alexander he was playing the game return from the south pole, if you look at his exhibition in that way the goal was to come back alive and the rules were mostly set by the landscape and weather so every cash he picked up was a feedback system and I'm pretty sure he did it on his own device. Outburst of extreme happiness is a result of the game or in other words the unnecessary obstacle that he set for himself. So in a less thrilling STEN YAR Yo I'm sitting on my couch on a Saturday night and playing to code. And (scenario) and then everything changed, you know last November I start my first job as a front end developer from one moment to the other my previous hobby turned into a profession and writing code became a serious business that paid the bills and I had to stop playing and put my unverified knowledge to the test. As we all know that didn't last. What still last is the experience of programming in the professional environment and my learning curve went straight through the roof. There's no better set up for a junior than to pay a program with a seasoned colleague. So my programming partner said he has never talked that much in his life. I also had clearly defined learning goals and the proc speck spect to reach another level of skill and this gave me an essential feeling of mastery. Furthermore I COMBAM a part of something bigger, so accomplishing things together, sharing knowledge and making social connections it's satisfying, and it gives me an essential feeling of purpose, it's two very powerful concepts mastery and purpose.

They provide an understanding for kind of fascinating stories behind open source projects. From the perspective of conventional economics these undertakings are disastrous. How would one justify spending 20 to 30 hours a week producing sophisticated technological work without any form of reimbursement and after weeks and weeks of dedicated work the final product is released for free. It's kind of how the linking comma came to me through 12,000 programmers who volunteered their timeline NUKS was a chance to be part of something bigger than them SXEFS connect their individual contribution to collective outcome and being parts that unfold on such great skills you know it's an experience of curiosity, ahh and wonder.

Where does it leave us? Should we go to an aqua PILUXING, contribute to open source projects, get a cat, probably all of the above. But all I know is that whatever you get up to and there's one skill that I hope you try to practice vigorously and that's the skill of allowing yourself to play and potentially against yourself. And actually before I wrap up rather soon I would like to confess I haven't touched much code in the last two months which does not meet I didn't build anything but more related to rusty nails and wooden beverages in the forest. See my excitement on my face that's how I feel about today and the up comings are workshop so unless there's any questions I would say go place.

...(APPLAUSE)...

>> Thank you Sonia. Are there any questions? We do have time for questions. All right. If there are no questions we'll move onto information about the day.

So we have workshops today. That's awesomement it's going to be fun. When making your way to the workshops which are maybe not in this building, please follow the people in front. So all right. Let's give that another try. So make sure you're following the people with signs on your way there. We have some of the workshops at coop and those workshops are the low stack web and Crypto workshops. So to get there exit the venue to the left walk up the street, take the SBAHN, then go it's a short walk from there if you're not from Berlin and that sounds challenging don't worry there are guides to take you there and if you are from Berlin hopefully that's not too bad.

Here is a map and I think this information will be tweeted out and things like that so you can read it there. One thing to mention is to if you're from Berlin you may be thinking why don't I just take the U6, and go down turns out you can not switch to the U1 they're doing construction and it drives right on through so don't do that, that's the wrong way to go. Any other weekend it would be an awesome way to go but not this weekend.

So here's a link that you can find more information. I'll leave that up there for a second if anybody wants to take a picture. I see lots of phones. All right. Oh, you have to be quicker than that, no, that's okay, go ahead. Oh, yes, sorry, I already mentioned that. Yeah. Awesome.

So then we have the Rust bridge workshop. To get there you're going to go this way, here's the map. Everybody understands that, right? We're done. You're going to exit the venue to the right, walk to the U2 and then it's a short walk from there and again there are people with signs that will lead you.

Here is the URL for that if you want to take a picture.

The embedded workshop and others small groups if you want to meet you can meet in here so you don't have to go anywhere, that's great. Like I said, it's it's an open space if none of the topics interested you, but you do have a topic that you find very interesting and want to try to get people together then this is the place to do it. We're going to sort of hopefully we don't need this many seats, so we're going to grab the seats so wait for that to happen before you set up shop.

And it's important to note that there's organizers and staff at all the venues, so if you have questions when you're there about anything then you can find them, they have nice T shirts and stuff. And we're coming back here in the evening, so make sure to meet back here before 5:00 in the evening. And there's a super secret announcement, so secret I don't even know what it is. So that's exciting. And have a great time. That's it.

...(APPLAUSE)...

.

(End of.

>> You can see some people getting their signs ready, so make sure to find the appropriate people.

(End of









HELLO, WELCOME BACK. How is everyone doing? It's the one last WOO of the day. All right, we have one more talk for RustFest 2016. Our next speaker Marijn Haverbeke is someone you may know from the JavaScript DMUNT and he's also worked extensively with rust on the compiler and he's here to tell us a little bit about the rust that could have been.

...(APPLAUSE)...

MARIJN: Here I'm glad so many people still showed up at the very end of the conferencement I'm going to be talking about mostly a number of features that were part of the rust language at some point but no longer are and why this is the case and usually why this is a good thing. So as Ryan said I'm Marijn Haverbeke, if you are into JavaScript you might have seen my name before, and so Rust has been under development for about 10 years I think first one stretch was working in isolation and who knows what kind of ideas and experience that were done at that point there's not even like a repository from that time public so it is like the pre-history, and then at some point MOZILA adopted the project and assembled the team from a little before that point we do have GIT history and at that point everything was discussed in issues and mailing lists and there's lots of records. I was part of this pretty much the initial team where we moved from the original compiler to a Rust based compiler got a bunch more people involved in the language, this was a period of like the first real experience at the language and a bunch of people from different back grounds giving their opinions on the language and trying to push it into their favorite direction and we had a lot of experiments and overalls and false starts and just lots of CHURN have a good morning off in the afternoon, because it was only one code base we fixed everything right away and people could continue working. There was some trick can Iness with actually getting a compiler that compiles the current code after you make a breaking change so you first change the compiler upload the snapshot and change the code and everyone could proceed with the new snapshot and then of course a year and a half ago I think the team cuts version 1.0 and then the process changed entirely, so now LTS like everything stays backwards compatible it's impressive how serious the backward compatibility, and experiments move like our Cs moves very slowly and there has to be a wide consensus and fit within the current code base.

So that's a whole different stage, again.

I'm going to be mostly talking about the period where I was part of the team, which was 2011 and 2012, and which was probably the largest period of features cut and change, stuff like that, so it may seem a bit ridiculous that we put so much time into so many complicated features and dropping them again but I think that's an essential part of get ago complex design like a program language right that unless you're a super general YUS you won't see in advance what the implications and interactions between the various parts of the system are and you have to try it and see how well you can make it work and how well it fits into the system and sometimes you later have to just abandon it again.

I think that's part ave healthy design process for like mere MORT TALS who need to actually see how something works before they can evaluate it, I'm stretching this talk around a number of visions that were part of the language and then dropped again, and I'll try to explain why I think in every case it was a real good decision to drop them, but it's still interesting to see what the original visions were and what we did end up with.

So these are type state, a structural type system, and light-weight processes, finally garbage collection. Let's start with type state. Type state is -- it was actually an important point initial announcements of the language and people were very excited about it, what type state does is basically allow you to -- allow the compiler to know more about the value than just the type, so an example would be this is something of type circuit but we also happen to know that it's open or this is something of type array that we happen to know our vector in the current terminology we know it's not empty. Something like that, allowing you to add more safety to your program, more static guarantees.

So when you're programming you usually have a mental model why this thing you are doing right now is valid, is not going to crash, if you're not just making random changes and seeing the test pass you will have some mental model of your program. To a certain degree, depending on the language, you can tell the compiler about this model and the compiler can check whether you are applying your model consistently, so in simple cases just types you're actually passing the type that you think you are passing somewhere and if you don't instead of finding out at run time you find out at compile time, this is nice, basically kind of a this computer does not have the fonts that my computer had, but imagine arrow heads on both sides, there's a spectrum on which languages fall in terms of how much can you actually communicate through the compiler, so on the one side JavaScript synthetically correct let's go ahead and run it, then on the way other side there's language requires you to actually construct a formal proof that your program does what it's supposed to do, that it does so in bounded time and bounded space, which means you're making a lot less mistakes but on the other hand it's like a major project to write a small program in such a language.

There's a reason that not everyone is writing their web servers in cork or whatever, and risk kind of falls in the middle it does have quite a bit of static guarantees and it helps quite a lot but aims to be easy to program, where you don't have to spend too much time working on these things. One way to see the history of programming language is kind of one aspect of this at least that we've been finding better and better VOE cab BLAER to describe the things we know about our program to the compiler in way that's actually convenient so if you have a really terrible type system that's often worse than no type system at all if you have to choose to write something in java or JavaScript I'll take JavaScript, thank you very much.

We're getting better in this Rust is making a big contribution, making a system program space and ownership model is I think really good. I unfortunately wasn't on the team when this was introduced so I can't take credit for it but I think it's the most XOOITing part of Rust and it's this kind of thing where the compiler knows what you're trying to do and tells you when you're violating your model.

So back to type state, it looks somewhat like this, you could define predicates, which is this pure function at the top, and the extra information that L the compiler had about your values came in the form of this predicate holds but these were just predicates written in normal Rust codes that were supposed to be pure, there was a problem with the affect system at that point that's gone now, they took a value and said I hold or I don't hold.

And then you could define for your functions pre conditions and post conditions, so you could say, for example, this function lost, here, demands that it's first arguments has the not empty predicates holding on it, because you can't take the last element from an empty array, and then before you could file such a value to such a function you have to convince the compiler that this predicate held at this point. And for some things this worked well, the compiler was very clever in propagating its information through the flow graph and taking it from the post conditions of the function, but you have an example create an array and pass it through lost, but that's not okay, I first have to check that it's not empty, and this actually is the same check would insert a run time test called to the predicates and then panic if it failed.

So we're actually I mean this array isn't empty this is very easy to prove because the compiler only saw these predicates as opaque pieces of code it couldn't actually reason about them, it could only take what you told it, like if you check the recurrence of check one was a just believe me just hold, so it might also have been appropriate here because I'm sure this array is not empty, and then there was one version that ensure that the compiler already aesthetically knew that it was something else, it was an' SERGS of okay I must know this at this point, but don't insert a run time check, I want to have aesthetic error if it's not provable.

But it in my experience the affect of this system was that you would be littering your code with check statements and they would also panic at run time, so the aesthetic, amount of aesthetic guarantees wasn't very great because often usually the compiler couldn't really help a lot with reasoning about when they actually held and when they didn't.

It was in the compiler for a long time still but eventually it was dropped because it was not pulling its weight so in terms of experiments in good expressive ways to express these kinds of things I think this was a failed experiment, but existed some research languages before but it's never really made it into a big mainstream type language, for good reason, I think.

So so much for that.

Next topic is structural typing so in typing systems you have two concepts where structural typing is say you have a function type, which has a few argument types and a return type and you want to compare it to another function type so you're just going to look at the fields and the function does it have the same amounts of arguments, are its arguments of compatible types, is it return type of compatible type, and that's structural.

On the other hand there's nominal typing where you just say where is this type declared what's the name of this type and it has to be the same so Rust currently works this way as do ENOMS are only compatible if they're actually instances of the things that are of the same points in the code.

Initially structure -- structural type so this currently brace this thing there is syntax for STRUKT type with two fields X and Y of type flow and the type decorations defines an alias for that type this is a name for the type record with two float fields and so if I define a function which takes an argument of this point I can call it with just a record constructed on the fly without any record name involved, records themselves don't have a name just a structure and a system and it's kind of nice and light weight and minimal and that's often you don't even bother to give your record a name if you only use it a few times, so you -- well you would now probably use it you can use TD record nice descriptive field names, I kind of liked it for programming with, but I'll come back later to why this part was removed another object of this was object type whereas structure types were only come pattedible if they had the XX same fields and in the same order, they weren't reordered because see compatibility and they had to be the exit same to be able to compile it efficiently, because then all codes are then DREKTSD with such a record knew how it was laid out in memory, objects were more dynamic feature and here any object type that has a subset of the fields, fields are always mattered so they're always functioned that this object type has it's compatible, so I could if I define the type a collection of T with these two is probably not a very great fraction but bear with me with a length and an item access or method you could take any objects that had I don't know what kind of methods but also these two and you could treat it as a collection of T.

So these were both the types of the concrete objects and roll of interfaces in terms of how much concept you need in terms of programming and could you also use it as a kind of checks duct typing where you define your function and just say I'm only going to call length on this thing that I'm getting, and then anything that had a length method could be passed in you don't even need to formally define an inter face name it's all structural by name.

So one implication of this was that because code that used didn't know their side they had to be garbage collected and any calls to them will be going through dispatch table a V table. So they're somewhat more heavy weight compared to the rest of the language, and we were finding that in the compiler we were SHIEG away from them unless we actually needed polymorphism because there were more heavy weight than necessary in many situations, and then at some point well there was also a lot of machinery involved in actually doing this like up costing to a type with less methods because then you needed to locate a new V table preferably aesthetically which create a wrapper, it was conceptually simple but not terribly simple to implement and then at some point we got more high school people on the team and all started agitating for a type class kind of implementation inter face thing that we ended up now and because no one really likes these objects very much we migrated to that, and I think they just fit with the language much better, they don't require you to put something on the heap, they don't require indirect calls unless you actually are using polymorphism, so I think that's a win.

But now that we had implementations, which affects a specific type, structural records also become problematic because if you're using a record that happens to have the same shape and two completely independent contacts and they both define a two-string implementation of it then these will clash even though they have actually nothing to do with each other they'll try to implement the same inter faces trait with it that doesn't work no one cared that much about structural records either so they became nominal for this reason, at that point.

And now of course people send functions are still structural they don't make much sense in any other way but heavy emphasis on structural typing was abandoned, again for good reasons.

And then so some -- we saw talk about asing chron news and synchronous programming yesterday, and there are languages like let go and erline which solve this in a different way, where they look synchronous that is like a slight of hand they're programmed sing cruise newsly but you don't pay for I don't know how many threads, it's more live than operating system threads that was part of Rust's initial vision so you don't need to mess with futures or reactors or anything you just spawn a bunch of tasks which for example each circuit or you could even if you are writing a calendar spawn a task for each task on the calendar or something, and they run as independent pro

esses but because they're designed to be cheap you don't have to worry about allocating the lens of them it just works.

Now it's not designed with this in mind they come from a period where people were not considering the lens of thread a reasonable thing to do and usually their internal data structures as well as the minimal overhead on a thread is too much to use to operate every circuit on your rep server.

So what you have to do then is you create your own tread pool in the language run time and you have your own task threads are picking up tasks running them for awhile when they block or time runs out they put them aside and take another task, they do their own scheduling which is also not reveal and of course even if you do this you still have the problem that that's simple opinion code has this conception of a stack where it can allocate stuff in like last in first out manner where it's gross during function calls and shrinks again when you return and that depends on infinite stag being there, they're not actually infinite of course but they're usually big enough to allow reasonably occurred programs to run without overflowing your stack. But that means big enough is quite a bit, you're going to not want your minimum stack to be half a kilobyte because then every program will overflow it.

So we got away from this simple stack model and introduced segmented stacks which are stacks where each function that once allocate on the stacks first checks where there is enough stack and if there's not enough stack it allocates a new piece of stack and kind of links that to the current stacking and runs on that and when that function returns it will throw away this piece of stack and return to its all stack.

O that's not good can you give me a cable?

(Laughter).

MARIJN: Got one. I hope there's a power thing, here. There we go.

...(APPLAUSE)...

MARIJN: The reason we don't just like grow the stack and copy all stuff onto the new stack is that would involve moving values in memory and that's a whole different can of worms and all the code has to be able to locate every pointer to rewrite it examine if it's held by some C code then who knows where it should be rewritten, so that's why we actually preserve the old piece of stack and then continue on a new piece. That's actually like quite a magic trick, but it works. It went for awhile this way but it does have some drawbacks, the biggest one is that if you have like an inter loop which is going to be running very often and that is exactly at the point where you're crossing to a new stack segment it's going to be allocating and throwing away so many stack segments like some of our BEFRMG marks I think it happened only once with our bench marks but it was ridiculously flow because of this like the stack switch happened exactly at the part of the benchmark that was running millions of time. So that's not a great obstruction it's kind of leaky it also has issues if you called C code it won't be managing segment of stack so you have to provide it with a big stack so we have a pool of big stacks and whenever you made a phone call you would get a big stack and then column that stack, there's lots of complexity if you want to call Rust code from C you have to arrange for the stacks to be in the right shape it worked but it wasn't great, and so this whole ambition was given up in terms of we don't want to pay that much run timely BRAER complexity we don't have all these problems like our own stack problem all these checks inserted into the code to make sure there's enough stack that's allocated there, and there the call was made to just not do that, so that we could be the kind of language that you can just link into a C program without pulling in I don't know what kind of obstructions and problematic factors, the kind of thing that you can write an operating system and that would also be a lot more challenging if the language depended on a big run time.

So no go, like light weight truss and it's cool to see the kind of solutions that are being found as in Tokyo and these kind of cheap futures.

The next one is kind of a similar story, so we start out with garbage collection because most of us were coming from garbage collected languages as a kind of in terms of okay this is what good language looks like, and we felt that you can't really provide an ergonomic language if you DOINT provide GAR GAJ collection. We did have a model that you only use garbage collection when you wanted it was opt in most values would be on the stack and you could have I think unique pointers at the time just what the box does now and you could WRIELT whole programs without ever using garbage collector but at the time the REFRJS counted garbage collector that was cycle breaker but there were plans to make it more a modern style of garbage collector but again this has a cost that is a bunch of run time complexity that you're pulling in, you have to deal with, like, what if C code gets a hold of such a pointer how do you know that we can't garbage collect it, so again, the complexity was doing too much this was quite awhile after I left and then Patrick Walton announced we could get rid of the garbage collector and my initial reaction was no, that's ridiculous, but then he explained, like, and it finally clicked for me that we could really be in the same niche as C++ is which I think the hugeest thing which is the reason why Rust is successful it can be run time without any complex machinery around it so it's capitulating to the simple mind that's programming model that we've been using for ages as a kind of baseline which is a shame in a way because it's not perfect but it's for systems programming it's the best we have and enabling allowing this language to be dropped in where you would normally use C++ is probably its biggest selling point and I got it and it was like okay this is a future that I can be excited about and I think it was actually relatively painless because you can swap in a reference pointr and have to be a bit more careful about cycles and that's all research work being done about integrating with garbage collectors and other systems but I don't think it's moving that well and, I don't know, I think we landed on a -- on a really good place, here, in terms of how bare bones the language should be.

Yeah, this was an example from the book that I wanted to show, it's not entirely painless not having a garbage collector returning a closure looks like this and it's not exactly half skull, but yeah, okay, I mean it's a compromise we have to make and I think it's worth it. Yeah, thanks for listening, I hope we still -- I think we still have time for a few questions.

So yeah, let's hear --

...(APPLAUSE)...

>> We have two minutes for questions, so does anybody have a question? I saw your hand in the back, first.

>> Audience member: Not that I would encourage someone to do that, but wouldn't the structural type kind of thing work like a template or like a generic would work that you could like generate a specific implementation for a certain type and then work without a V table?

MARIJN: Yes, you can, actually. And I think LOV somebody is clever enough to do this for us where they can see it was always the same V table and in line it but you're still paying a conceptual cost for it and I think it's easier to have a model where you don't generate this complex code and optimize it back where you rely on these clever opt Tim Ms. SGLAGS contribution.

>> One more question?  I saw you.

>> Audience member: Hi so recently I saw either an RFC or Rust internal red where someone was proposing these anonymous struts like you had in your --

MARIJN: Okay.

>> Audience member: You didn't touch that much on why they were removed I wanted to know why that would be a good thing to add into the language my personal opinions is fairly favorable I think that would be a good idea.

MARIJN: So the main reason as I remember if for removing them at least at that point I think we saw it do we make the structure we have nominal or structural the reason for move to go nominal was they worked terribly with trades, you can't have this coherency where you're guaranteed even if you link multiple modules together you don't end up with the modules together with the same trait same type that's the reason for that.

>> We do have now we can make trade implementations for these large too poles but it's not generic integers.

MARIJN: You have to do that in the trite that defines the trait, you can't do that anywhere else and that's a restriction that, yeah, it could work of course you would wrap your struts in some other type and define it on that if you're ready to define a trait in a different trait it's not very easy or convenient.

>> Thank you.

>> Unfortunately, we're out of time.

MARIJN: All righ

.

>> I'm sure there will be some time after wards, so now one last round o

applause, please.

...(APPLAUSE)..



>> So RustFest is coming to an end last thing we have is our closing present takes, which Florian is bringing up now.

So did everybody have a good time.

>> Yeah.

...(APPLAUSE)...



>> Yeah, one MOR time, yeah.

...(APPLAUSE)...

>> That power is sort of infectious, it's kind of weird. Any way so to recap what we had this weekend was 185 attendees here, and we had 13 speakers, if the speakers are still here can everybody come up on stage for a picture? And while they're coming up everybody give them a big round of applause.

...(APPLAUSE)...

>> Thank you, speakers.

...(APPLAUSE)...

>> We also had our first Rust bridge workshop. I know I'm looking forward to talking to everybody that was there, how it was, it sounded like it went really well, here's the picture of the Rust bridge, first Rust bridge.

...(APPLAUSE)...

>> So to close off things we're going to bring up Florian who is going to end this thing with a bang.

>> Well first of all a round of applause and thank you to Ryan LIVAC our MC.

So first of all, it's me doing all the talking, but this is a team event and there's been a lot of people involved, so if the whole team could please come on stage?

...(APPLAUSE)...

>> So we do have the most awesome of issues, which is Ben is missing because Ben took the use of the U1 to change for the U6 which we told everyone they should not because the connection's blocked.

...(APPLAUSE)...

.

(Laughter).

>> So while the picture is taking left to right Eric who's been doing all the cabling and wiring, thank you.

...(APPLAUSE)...

>> We have Katrina who did accessibility support all the printing the badges and all of these things and a lot of the reception service, thank you, thank you, thank you.

...(APPLAUSE)...

>> We have JOHAN who has been our best contacts -- no FLAKE is our best contact or they should fight it out, I don't know, two members from MIZOLA Johann is one of the founders, FLAGE is the person with the fire foxes so thank you, two.

...(APPLAUSE)..



>> General is a little bit accessible he moved over to Germany to be here today. A month ago.

...(APPLAUSE)...

>> And Ben from the open tech school also has been awesome and mailing people, talking to people, getting the phone calls out and getting all the stuff done, thank you, thank you, thank you.

...(APPLAUSE)...

>> And of course Florian without whom it would not have happened at all, Florian, thank you.

...(APPLAUSE)...

>> So and then we do have -- we do have another wheel we have the rest of the team who couldn't make it here due to visa reasons, from the Ukraine Andre and JANA, hi.

...(APPLAUSE)...

>> Florian: Can do you that again?

...(APPLAUSE)...

>> Florian: Sorry I think I cut the ATMI cable, sorry. So I've got a couple of other words to say. This is still a thing and for us it doesn't fix it, so a word about what is RustFest, so RustFest, et al was a bit of the idea what could a Rust conference be, you're rarely in the position to say we're running the first conference at someplace, and so we had a couple ideases of things we wanted to do and put trade bounds on that, first of all, we wanted to be as open as possible as a conference, so we wanted to be approachable, we wanted to have be open for ideas and try things out, for example how does it work if we send everyone around town to run workshops instead of another set of talks. We would like to have feedback on that, maybe there's little things we can improve, did you like it, did you like in general, did you like it not, please approach us.

We wanted RustFest as inclusive as possible, it's at the core of the Rust communities it's one of the only one that is had a code of conduct from the start and they say if we didn't have it I wouldn't have given you Rust we have that to but we wanted to put out an accessibility statement out so that people with accessibility needs could attend and we wanted to do our best to do this and we wanted to make the conference affordable so even at the price the conference cost we still had a discussion were the prices too high, we would really like to have this conference at least cap out on that level when it comes to other additions or if there should be any.

So the other thing is it's a community so it can always be imperfect and that's the nice thing this is not a full production by a professional team everyone here is unpaid for that and doing that in their free time there are issues people getting ill and all this kind of stuff, so this is something that we want to keep for this conference, don't expect this to always be like a perfect thing.

So one of the things I want to say there, if you want to run a conference and meet up or camp or something like that within the Rust community get in touch as the RustFest team or get in touch with the community team under the e-mail community team@rust link.org we're always accessible, if you tell us you're going to run something we'll find some way to support it even if we just get the word O out for you so please approach us if you want to be involved in anything there.

So which brings me to the question, next RustFest.

(Laughter).

>> Florian: Which I'll let these two people answer.

(Inaudible).

>> It's going to happen next spring and it's going to be amazing and it's going to be affordable and it's going to be for everyone. We can't wait to see you all. We can't wait to see you all coming over, see the city, see each other, and just enjoy Rust, enjoy the conference. YAY.

...(APPLAUSE)...

>> Florian: So this answers the question that has been asked at least five times yesterday and I'm too bad at clicking the windows so next RustFest April 9th, 2017, in KIEV I hope pencil it in, you're going to find news on our website so you can still sign up for the newsletter on our website and you have the announcement in your box.

Thank you.

...(APPLAUSE)...

>> Florian: Also having never managed to be to KIEV I'm looking forward to this, we have one final thing the organizers are going to spend the evening together you're invited we're going to be at the beer garden you can take the U6 because you don't have to switch.

Oh, thanks, one of our team members is sick today, I'm very sorry and I forgot it in the rush of the announcements so AMAR who has been running the registration desk yesterday and also organizing a lot of communication with the venue and hotel and everything is sadly sick today. She has a twitter account so tweet a thank you to her if you want to. I'm going to tweet the twitter account around later, thank you.

...(APPLAUSE)...

>> Florian: So this is basically the way you take the U6 I'm going to tweet this out, although we were going to bring a lot of stuff back to our offices and everything, so it's going to take us some time until we are there, we'll trickle in so if you want to go just go and we'll be in later.

Which brings me to FLAKE who wants to take a family photo.

>> No, no, it wasn't actually his idea, so yes, yes, more, please, more bottles, so yes, we are going to make a family photo and we want it to be awesome and we need your help for that so we're going to line up along those walls, take a photo from the right to the left, for that obviously there is some obstructions in the way and namely these chairs, so please let me ask you to help us stack these chairs up and bring them over so we can make the family photo and we can all look cool and set a precedent for next year's conference.

Next year we're going to crowd source awful our logistics. Thank you so much. I hope somebody was run ago stop watch because I cannot believe this was so fast. So if you don't have a chair in your hand please start lining up not right next to the wall but look up, look up, stand one meter after the wall, so if you're standing behind next to the wall step forward, three steps, that's at least two steps, one more step forward, one more step forward, people. That should do.

Yes, make sure -- make sure you're not obscured by Rust stations, cruise stations, crabs and other sea and animal life Get closer together, people, we still have too many people.

From the right-hand side there's too many also a bit dark, please try from the sides try to move over, try to snuggle a bit more. Kick them in the shins. No, no, we are still having a code of conduct. Can we have this light a bit brighter? I guess that's a no. My German's a bit rusty. Oh, perfect. Thank you so much.

DANKESHE

screams
----------
